{"version":3,"sources":["Hoc/Hoc.js","Context/Context.js","Context/Child.js","Context/Parents.js","Sider.js","App.js","showTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Storage.js","Todolist/Todolist.js","Portal/Portal.js","Request1.js","Portal/ParentPortal.js","index.js"],"names":["url","hoc","Com","title","Fetch","state","data","fetch","method","then","res","json","console","log","setState","result","this","props","Component","displayName","name","getDisplayName","Music","a","map","item","idx","key","author","Music2","Mymusic","Mymusic2","Hoc","con","React","createContext","Child","context","contextType","Parents","time","Date","toLocaleString","timeId","setInterval","clearInterval","Sider","style","float","type","block","to","toduinput","handleInput","e","keyCode","add","target","value","bind","text","onKeyDown","Todoing","fin","fdel","fcancel","todo","flist","index","onClick","del","length","storage","set","localStorage","setItem","JSON","stringify","get","parse","getItem","remove","removeItem","Todolist","addItem","delItem","splice","data1","push","data2","todoList","flists","Portal","handleClick","ReactDOM","createPortal","document","body","render","getElementById"],"mappings":"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","file":"static/js/main.d49c4d0c.chunk.js","sourcesContent":["// 高阶组件(传一个组件进去)就是一个函数，且该函数接受一个组件作为参数，并返回一 个新的组件 实现组件复用\r\nimport React, { Component } from 'react'\r\n\r\nlet url='https://api.apiopen.top/musicRankingsDetails?type=1';\r\nfunction getDisplayName(Com){\r\n    return Com.displayName || Com.name ||'Component';\r\n}\r\n\r\nfunction hoc(Com,url,title){//该函数是写状态、请求接口；  Com是组件\r\n    class Fetch extends Component{\r\n        constructor(){//生命周期要在组件中\r\n            super();\r\n            this.state={\r\n                data:[]\r\n            }\r\n        }\r\n        //想改用setState\r\n        componentDidMount(){\r\n            //fetch的post请求\r\n            // 默认是get请求，可配置第二个参数，配置请求的类型\r\n            fetch(url,{method:'post'})\r\n            .then((res)=>res.json())\r\n            .then((res)=>{\r\n                console.log(res);\r\n                this.setState({\r\n                    data:res.result\r\n                })\r\n            });\r\n            \r\n        }\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <p>{title}</p>\r\n                    {/* {...this.props} a=this.props.a  传递父组件的所有属性get子组件*/}\r\n                    <Com {...this.props} data={this.state.data}/>  {/* //就是Music 的ul标签 */}\r\n                </div>\r\n            )\r\n            \r\n            \r\n        }\r\n    }\r\n    // Fetch.displayName='Fetch('+Com.name+')';//命名，分辨fetch套的哪个子组件\r\n    // Fetch.displayName=`Fetch(${Com.name})`;\r\n    Fetch.displayName=`Fetch(${getDisplayName(Com)})`;\r\n    return Fetch;\r\n}\r\n\r\nclass Music extends Component{//Music就是上面的 参数Com  渲染的结构\r\n    render(){\r\n        return (\r\n            <ul>\r\n                <h1>{this.props.a}</h1>{/* 获取a属性 */}\r\n                {\r\n                    this.props.data.map(\r\n                        (item,idx)=><li key={idx}>\r\n                        <p>{item.title}</p>\r\n                        <p>{item.author}</p>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nclass Music2 extends Component{//Music就是上面的 参数Com\r\n    render(){\r\n        return (\r\n            <ol>\r\n                {\r\n                    this.props.data.map(\r\n                        (item,idx)=><li key={idx}>{item.title}</li>)\r\n                }\r\n            </ol>\r\n        )\r\n    }\r\n}\r\n\r\nlet Mymusic =hoc(Music,url,\"新闻\");//返回Fetch组件，Mymusic就不用再次发起请求\r\nlet Mymusic2=hoc(Music2,url,\"音乐\");\r\n\r\nexport default class Hoc extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Hoc组件\r\n                <Mymusic a='aa'/>\r\n                <Mymusic2 />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n//公共文件，导出Provider,Comsumer 父文件导入Provider，子组件导入Consumer\r\n// export let{Provider,Consumer}=React.createContext();\r\nexport let con=React.createContext();//con对象，有属性：Provider,Comsumer\r\nexport let con2=React.createContext();//con对象，有属性：Provider,Comsumer\r\n\r\n","import React, { Component } from 'react';\r\nimport {con,con2} from './Context';\r\n\r\n\r\nexport default class Child extends Component {\r\n    render() {\r\n        // 默认的属性\r\n        console.log(this.context);\r\n        return (\r\n            <div>\r\n                Child组件\r\n                <div>{this.context}</div>{/**通过属性显示 */}\r\n                {/* <div>{id}</div> */}\r\n                {/* <con.Consumer>\r\n                    {\r\n                        (id)=><div>{id}</div>\r\n                    }\r\n                </con.Consumer> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nChild.contextType=con;\r\n// Child.contextType=con2;\r\n","import React, { Component } from 'react';\r\nimport Child from './Child';\r\n\r\nexport default class Parents extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            time:new Date().toLocaleString()\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.timeId=setInterval(() => {\r\n            console.log(111);\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000);\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.timeId);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.time}</h1>\r\n                Parents组件\r\n                <Child />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button} from 'antd';\r\n\r\nexport default class Sider extends Component {\r\n    render() {\r\n        let style={float:'left'}\r\n        return (\r\n            <ul style={style}>\r\n                <Button type='primary' block>按钮</Button>\r\n                <li>\r\n                    <Link to='/hoc'>Hoc</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/parents'>Parents</Link>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","// Router\r\n\r\nimport React, {Component} from 'react';\r\nimport {BrowserRouter as Router,Route,Link} from 'react-router-dom';\r\nimport Hoc from './Hoc/Hoc';\r\nimport Parents from './Context/Parents';\r\nimport Sider from './Sider';\r\n\r\nexport default class App extends Component{\r\n  render(){\r\n      return (\r\n          <Router>{/* 多个route只有一个出现 */}\r\n            {/* 这只能一个div */}\r\n            <div>\r\n              <Sider />\r\n              <div style={{float:'left',border:'2px solid red',marginLeft:'100'}}>\r\n                <Route path='/hoc' component={Hoc} />\r\n                <Route path='/parents' component={Parents} />\r\n              </div>\r\n            </div>\r\n          </Router>\r\n      )\r\n  }\r\n}","//子组件\r\nimport React,{Fragment,Component} from 'react';//将fragment解构，则下面使用时不用React.Fragment\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n//方式二：类定义组件，props是类的属性\r\nclass ShowTime extends Component{\r\n    constructor(props){//声明状态,自动执行的函数\r\n        super(props);//必须最先调用,获得构造器中的属性，必须传参数props\r\n        this.state={//通过setState改变里面的值\r\n            time:new Date().toLocaleString(),//声明变量\r\n            a:100\r\n        }\r\n        console.log('constructor');\r\n        setInterval(() => {\r\n            this.setState({//数据一变，react会响应变化，重新渲染\r\n                time:new Date().toLocaleString()\r\n            })\r\n        }, 1000);\r\n    }\r\n    shouldComponentUpdate(){//是否要更新；flase;setState改变，render只执行一遍\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){//三个参数（preProps,preState,data）\r\n        console.log(\"cdupdate\");\r\n        console.log(preProps,preState);//preState更新之前的state\r\n        console.log(data);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"getshost\");\r\n        return {name:this.state.a};//返回值给componentDidUpdate\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){//自动执行（生命周期函数）setState改变，render执行一遍\r\n        console.log('render');\r\n        var {name,age}=this.props;//解构\r\n        return (\r\n            <Fragment>\r\n                {/**条件渲染 ：三目运算符(if-else)、&&(if)*/}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {/* {name.length>5 && <div>姓名：{name}</div>} */}\r\n\r\n                <div>{this.state.time}</div>\r\n                \r\n                {/**数组循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{//返回数组\r\n                            if(index%2===0){\r\n                                return <p key={index}>{item}</p>//变量加{},key唯一标识，内容、标签没变，位置变了，也不重新渲染\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n//默认导出：只能导出一次，被引入时可以重命名\r\n// export default ShowTime;//导出，有default，可以修改导入的组件名字   import ShowTime from \"./showTime\"   \r\n\r\n//命名导出:可以导出多个，被引入时与导出的名一样（类似解构）\r\nexport {ShowTime};//import {ShowTime} from \"./showTime\"\r\nexport const num=100;","import React, { Component } from 'react';\r\nimport './Todo.css';//也可在Todolist中引入\r\n\r\nexport default class toduinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput=this.handleInput.bind(this);//this绑定到handleInput\r\n        // this.state={\r\n        //     a:\"\",\r\n        //     b:\"\",\r\n        //     c:\"\"\r\n        // }\r\n    }\r\n    // handleChange=(e)=>{\r\n    //     this.setState={\r\n    //         [e.target.name]:parseInt(e.target.value==\"\"?0:e.target.value)//选择a\\b\\c,一个事件控制三个表单元素\r\n    //     }\r\n    // }\r\n    // handleInput=(e)=>{\r\n    //     this.props.add(e.target.value);\r\n    // }\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode===13){//按下回车\r\n            this.props.add(e.target.value);//e.target发生事件的最根本元素，此处表示input;将数据传给父组件\r\n        }\r\n    }\r\n    \r\n    // componentDidMount(){//render之后执行\r\n    //     // this.a.focus();\r\n    //     // this.refs.b也可获得input节点\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input text=\"text\" onKeyDown={(e)=>{this.handleInput(e)}}></input>\r\n            </div>\r\n        )\r\n            \r\n        // (\r\n            \r\n            // <div className={this.state.b+this.state.c>10?'box':''}>\r\n                {/* 点击label,就相当于点input 可用来修改input标签的默认样式 */}\r\n                {/* <label htmlFor='inp'>请输入第一个数</label> */}\r\n                \r\n                {/* <input id='inp' className=\"box\" name='a' onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} text=\"text\"></input>子组件---->父组件： onKeyDown不会自动执行 */}\r\n                {/* + */}\r\n                {/* <input ref='b' name='b' onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} text=\"text\"></input>子组件---->父组件： onKeyDown不会自动执行 */}\r\n                {/* + */}\r\n                {/* <input name='c' onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} text=\"text\"></input>子组件---->父组件： onKeyDown不会自动执行 */}\r\n                {/* = */}\r\n                {/* <p>{this.state.a+this.state.b+this.state.c}</p> */}\r\n                {/* 非受控组件：一次性获取或处理表单元素的值  ref获取DOM节点，获取值也要从状态中获取*/}\r\n                {/* 非受控组件的两种形式 */}\r\n                {/* <input ref={(inp)=>{this.inp=inp}} type=\"text\"></input>\r\n                <input ref='a' type=\"text\"></input> */}\r\n\r\n\r\n\r\n                {/* 获取上一节点的值，可将上一节点的值保存到状态 ；可以实时获取表单的值；写法相对麻烦*/}\r\n                {/**style中可以加入逻辑 */}\r\n                {/* <button style={{color:\"red\",fontSize:\"20px\"}} */}\r\n                // <button className=\"btn\" onClick={()=>{console.log(this.inp)}}>提交</button>\r\n            // </div>\r\n        // )\r\n    }\r\n}\r\n\r\n// 受控组件：\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，给input标签加上name属性，事件处理函数中写：\r\n// setState={\r\n//             [e.target.name]:e.target.value\r\n//         }\r\n","import React, { Fragment,Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    fin=(idx)=>{\r\n        this.props.fin(idx);\r\n    }\r\n    fdel=(idx)=>{\r\n        this.props.fdel(idx);\r\n    }\r\n    fcancel=(idx)=>{\r\n        this.props.fcancel(idx );\r\n    }\r\n    render() {\r\n        var {todo,flist}=this.props;\r\n        return (\r\n            <fragment>\r\n            <ul>\r\n                {\r\n                    todo.map((item,index)=>\r\n                        <li key={index}>{item}---\r\n                            <button onClick={(e)=>{this.props.del(index)}}>删除---</button>---\r\n                            <button onClick={(e)=>{this.fin(index)}}>完成</button>\r\n                        </li>  \r\n                    )\r\n                }\r\n            </ul>\r\n            <span>{todo.length}</span>\r\n            <ul>\r\n                {\r\n                    flist.map((item,index)=>\r\n                        <li key={index}>{item}---\r\n                            <button onClick={(e)=>{this.props.fdel(index)}}>删除---</button>\r\n                            <button onClick={(e)=>{this.props.fcancel(index)}}>取消完成</button>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n            <span>{flist.length}</span>\r\n            </fragment>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.propTypes={//定义属性类型,进行类型检查\r\n    todo:PropTypes.array,//string会报错\r\n    del:PropTypes.func\r\n}\r\n\r\n","var storage={\r\n    set(key,value){\r\n        localStorage.setItem(key,JSON.stringify(value));\r\n    },\r\n    get(key){\r\n        return JSON.parse(localStorage.getItem(key));\r\n    },\r\n    remove(key){\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\nexport default storage;","//Todolist父组件\r\n//引入Todoinput、Todoing；被引入到index.js\r\nimport React, { Component } from 'react'\r\nimport Todoinput from \"./Todoinput\";\r\nimport Todoing from \"./Todoing\";\r\nimport storage from './Storage';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[],//通过状态声明变量\r\n            flist:[]\r\n        }\r\n    }\r\n    //执行完执行回调函数\r\n    addItem=(data)=>{//是属性，是一个方法，data是输入的数据\r\n        this.setState({//改变数组,页面会自动变\r\n            todo:[...this.state.todo,data],\r\n        },()=>{\r\n            storage.set(\"todoList\",this.state.todo);            \r\n        })\r\n    }   \r\n    delItem=(idx)=>{//传参和对象（此处没有用到e 例子  并且对象要作为最后一个参数） \r\n        /**\r\n         * 1、状态不能直接改变或处理state，通过setState改变\r\n         * 2、setState是异步执行\r\n         */\r\n        let todo=[...this.state.todo];//拷贝一份操作\r\n        todo.splice(idx,1);\r\n        this.setState({\r\n            todo:todo\r\n        },()=>{\r\n            storage.set(\"todoList\",this.state.todo);\r\n        })\r\n//在setState里获取state可能会出错，不是你想要的值，可以像上面一样，把第一个参数写成函数\r\n       \r\n    }\r\n    fin=(idx)=>{\r\n        let data1=this.state.todo[idx];\r\n        // console.log(data1);\r\n        this.state.flist.push(data1);\r\n        storage.set(\"flists\",this.state.flist);\r\n        this.delItem(idx);\r\n        // console.log(this.state.flist);\r\n    }\r\n    fdel=(idx)=>{\r\n        let flist=[...this.state.flist];//拷贝一份操作\r\n        flist.splice(idx,1);\r\n        this.setState({\r\n            flist:flist\r\n        },()=>{\r\n            storage.set(\"flists\",this.state.flist);\r\n        })\r\n\r\n    }\r\n    fcancel=(idx)=>{\r\n        let data2=this.state.flist[idx];\r\n        this.state.todo.push(data2);\r\n        storage.set(\"todoList\",this.state.todo);\r\n        let flist=[...this.state.flist];//拷贝一份操作\r\n        flist.splice(idx,1);\r\n        this.setState({\r\n            flist:flist\r\n        },()=>{\r\n            storage.set(\"flists\",this.state.flist);\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        var todoList=storage.get('todoList');\r\n        var flists=storage.get('flists');\r\n\r\n        if(todoList){\r\n            this.setState((state)=>{\r\n                return{\r\n                    todo:todoList\r\n                }\r\n            })\r\n        }\r\n        \r\n        if(flists){\r\n            this.setState((state)=>{\r\n                return{\r\n                    flist:flists\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {//属性、状态一变，就执行\r\n        return (\r\n            <div>\r\n                {/* 引入组件 */}\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo} flist={this.state.flist} fin={this.fin} fdel={this.fdel} fcancel={this.fcancel}/>{/**父组件---->子组件：todo */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//深拷贝、浅拷贝\r\n        // var obj={a:100,b:[1,2,3]};\r\n        // var obj1={c:300};\r\n        // var o=obj;\r\n        // var o1={...obj};//新对象\r\n        // var o2=Object.assign(obj,obj1);//浅拷贝，o===obj\r\n        // o.a=200;\r\n        // o.b[0]=200;//浅拷贝（部分相同）\r\n        // o1.a=200;\r\n        // //深拷贝：每一层都不一样\r\n        // var str=JSON.parse(JSON.stringify(obj));//JSON.stringify(obj)一个新的字符串，JSON.parse(JSON.stringify(obj))一个新的对象\r\n\r\n        //遍历对象\r\n        // Object.keys(obj).forEach((item)=>{//Object.keys(obj)表示的属性名组成的数组\r\n        //     console.log(item);\r\n        //     console.log(obj[item]);\r\n        // });","//Portal提供了一种将子节点渲染到父组件以外的 DOM 节点的方式\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default class Portal extends Component {\r\n    handleClick=()=>{\r\n        console.log('ProtalClick')\r\n    }\r\n    render() {\r\n        return (\r\n            //将div添加到body,事件流依然保留，以组件顺序冒泡\r\n            ReactDOM.createPortal(\r\n                <div>\r\n                    <h1 onClick={this.handleClick}>Portal</h1>\r\n                </div>,\r\n                document.body\r\n            )\r\n            \r\n        )\r\n    }\r\n}\r\n","import React,{ Component } from 'react'\r\nimport Axios from 'axios';\r\n// 数据请求：Axios :npm install \r\n// import {fetch} from 'whatwg-fetch'  fetch是原生的函数，可以不引入；引入就是将fetch封装，无需下载\r\n\r\nexport default class Request extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data:[]\r\n        }\r\n    }\r\n    //想改用setState\r\n    componentDidMount(){\r\n        // 只会执行一次,axios.get(url,Obj){},发起请求\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1').then((res)=>{\r\n        //     console.log(res);\r\n        //     this.setState({\r\n        //         data:res.data.result\r\n        //     })\r\n        // })\r\n\r\n        //fetch的post请求\r\n        // 默认是get请求，可配置第二个参数，配置请求的类型\r\n        // let url='https://api.apiopen.top/musicRankingsDetails?type=1';\r\n        // fetch(url,{method:'post'})\r\n        // .then((res)=>res.json())\r\n        // .then((res)=>{\r\n        //     console.log(res);\r\n        //     this.setState({\r\n        //         data:res.result\r\n        //     })\r\n        // });\r\n        //fetch请求\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        .then((res)=>res.json())\r\n        .then((res)=>{\r\n            console.log(res);\r\n            this.setState({\r\n                data:res.result\r\n            })\r\n        });\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>数据请求:</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map((item,idx)=>\r\n                        <li key={idx}>\r\n                            <p>歌名：{item.title}</p>\r\n                            <p>作者：{item.author}</p>\r\n                        </li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Portal from './Portal';\r\n\r\nexport default class ParentPortal extends Component {\r\n    handleClick=()=>{\r\n        console.log('ProtalClick')\r\n    }\r\n    render() {\r\n        return (\r\n            <div onClick={this.handleClick}>\r\n                <Portal /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// index.js会被管理自动进入index.html，打包的build 在保存后会自动更新\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport React,{Fragment,Component} from 'react';//将fragment解构，则下面使用时不用React.Fragment\nimport ReactDOM from 'react-dom';\nimport {ShowTime} from './showTime';//引入组件，js可以省略\nimport Todolist from './Todolist/Todolist';//也可显示出它里面引入的\nimport './index.css';\nimport { tsPropertySignature } from '@babel/types';\nimport Request from'./Request1'\n// import Parents from './Context/Parents'\n// import Hoc from './Hoc/Hoc';\nimport ParentPortal from './Portal/ParentPortal'\n\n\n\n\n\n// ReactDOM.render(<App />,document.getElementById('root'));\n\n\n\n\n// ReactDOM.render(<ParentPortal />,document.getElementById('root'));\n\n// ReactDOM.render(<Hoc />,document.getElementById('root'));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//组件交互：\n//父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件---->父组件：\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n/**\n * Context:\n * 1、生成Context，可写在一个js文件中，exprot导出\n * 2、在根组件配置Provider，加上value属性，value的值是要传递的值\n * 3、在需要获取数据的组件，import Consumer并配置Consumer,Consumer组件里是个函数，函数的参数是传过来value值\n */\n//Context越层(Parents)将id传入child子组件\n// import {con,con2} from './Context/Context';\n// let id=12;\n// ReactDOM.render(\n//     <con.Provider value={id}>\n//         {/* <con2.Provider value=\"daa\">\n//             <Parents />\n//         </con2.Provider> */}{/**可多个引入 */}\n//         {/* Parents里引入的子组件都可以接收id的值 */}\n//         <Parents />\n//     </con.Provider>,\n//     document.getElementById('root'));\n\n\n\n\n// ReactDOM.render(<Request/>,document.getElementById('root'));//加载组件以及该组件引入的子组件\n\n\n\n\n\n\n\n\n//组件\n//方式一：函数定义组件，函数名大写，返回react\n// function ShowTime(props){//props只读，不可修改\n//     console.log(props);\n//     return (//多个标签返回加括号，并且将所有的标签放入到一个闭合的标签里，文档碎片fragment，一个容器\n//         <Fragment>\n//             <div>{props.age}</div>\n//             <div>\n//                 {props.name}\n//                 {new Date().toLocaleDateString()}\n//             </div>\n//         </Fragment>\n//     )\n// }\n\n//方式二：类定义组件，props是类的属性\n// class ShowTime extends Component{\n//     constructor(props){//声明状态,自动执行的函数\n//         super(props);//必须最先调用,获得构造器中的属性，必须传参数props\n//         this.state={//通过setState改变里面的值、声明变量\n//             time:new Date().toLocaleString(),//声明变量\n//             a:100\n//         }\n//         console.log('constructor');\n//         setInterval(() => {\n//             this.setState({//数据一变，react会响应变化，重新渲染\n//                 time:new Date().toLocaleString()\n//             })\n//         }, 1000);\n//     }\n//     shouldComponentUpdate(){//是否要更新；flase;setState改变，render只执行一遍\n//         if(this.state.a>10){\n//             return true;\n//         }\n//         return false;\n//     }\n//     componentDidUpdate(preProps,preState,data){//三个参数（preProps,preState,data）\n//         console.log(\"cdupdate\");\n//         console.log(preProps,preState);//preState更新之前的state\n//         console.log(data);\n//     }\n//     getSnapshotBeforeUpdate(){\n//         console.log(\"getshost\");\n//         return {name:this.state.a};//返回值给componentDidUpdate\n//     }\n//     componentDidMount(){\n//         console.log('didmount');\n//     }\n//     render(){//自动执行（生命周期函数）setState改变，render执行一遍\n//         console.log('render');\n//         var {name,age}=this.props;//解构\n//         return (\n//             <Fragment>\n//                 {/**条件渲染 ：三目运算符(if-else)、&&(if)*/}\n//                 {name.length>5?<div>姓名：{name}</div>:''}\n//                 {/* {name.length>5 && <div>姓名：{name}</div>} */}\n\n//                 <div>{this.state.time}</div>\n                \n//                 {/**数组循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item,index)=>{//返回数组\n//                             if(index%2===0){\n//                                 return <p key={index}>{item}</p>//变量加{},key唯一标识，内容、标签没变，位置变了，也不重新渲染\n//                             }\n//                         })\n//                     }\n//                 </div>\n//             </Fragment>\n//         )\n//     }\n// }\n\n\n\n//组件ShowTime\n// var num=[1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"lisi\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n//显示当前系统时间\n//只有改变的节点才会动，性能好\n// function showTime(){\n//     var ele=<div>{new Date().toLocaleString()}</div>//react对象\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// }\n// showTime();\n// setInterval(showTime, 1000);\n\n\n\n\n\n\n\n\n// var str='react';\n//遇到<,ele转换为对象\n// ①var ele=<h1 class=\"tit\">你好 <p>react</p></h1>\n// var obj={\n//     type:'div',\n//     props:{\n//         id:'box',\n//         class:'box',\n//         children:[\n//             'hello',\n//             'react',\n//             {\n//                 type:'h1',\n//                 props:{\n//                     id:'tit',\n//                     class:'tit',\n//                     children:[\n//                         'title',\n//                         'react',\n                        \n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n\n//react解析栈\n//jsx语法\n//返回对象\n// var ele=React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'tit',class:'title'},\n//         'hello',\n//     )\n// );//②\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));//获取根节点,ele不用加 \" \",不是一个标签，而是对象\n\n//③渲染，将obj加入root中\n// function render(obj,container){\n//     var {type,props}=obj;//解构赋值\n//     var fragment=document.createDocumentFragment();//文档碎片 ：类似节点，相当于一个变量\n//     var ele=document.createElement(obj.type);//创键div\n//     for(var item in props){//将obj的属性加入到创建的div\n//         if(item==='class'){\n//             ele.className=props[item];\n//             // ele.className=obj.props[item];\n//         }\n//         else if(item==='children'){\n//             for(var i=0;i<props.children.length;i++){\n                \n//                 if(typeof props.children[i]==='object'){\n//                     render(props.children[i],ele);\n//                 }\n//                 else{\n//                     // ele.innerHtml+=props.children[i];\n//                     var txt=document.createTextNode(props.children);\n//                     ele.appendChild(txt);\n//                 }\n                \n//             }\n//         }\n//         else{\n//             ele[item]=obj.props[item];//class未加进去\n//             //ele[item]=obj.props[item];\n//         }\n        \n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n\n// render(obj,document.getElementById('root'));\n\n/**\n * 页面渲染过程：\n * 请求HTML页面，浏览器HTML解析器会解析HTML文件，生成DOM树\n * link引入CSS文件，CSS解析器解析CSS文件，生成CSS对象模型（CSSOM和DOM树结合，生成一个（render）渲染树），最后浏览器绘制页面\n * \n */\n\n\n//页面回流（重排reflow）:DOM结构变化、内容变化、大小、位置、显示（display）的变化，都会引起页面回流（变化次数多，性能就差）\n//页面重绘（repaint)：颜色的变化（背景色、字体颜色、边框颜色）\n//回流一定引起重绘\n\n//1、先用变量进行DOM处理，最后一次性渲染\n// console.time('time');\n// var div= document.getElementById('root');//文档碎片\n// var str='';\n// for(var i=0;i<1000;i++){\n//     // document.getElementById('root').innerHTML+='<p>'+i+'</p>'//每次调root，不好\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;//先用变量处理，再一次性渲染\n// console.timeEnd('time');\n\n//2、对于样式的处理\n// var div=document.getElementById('root');\n// div.style.width='100px';//引起回流\n// div.style.height='100px';//引起回流\n// div.style.background='red';\n\n//改:\n// .active{\n//     width:100px;\n//     height:100px;\n// }\n// div.className='active';\n\n//3、offsetLeft:距离浏览器左边的距离、offsetwidth等都会引起回流\n// console.log(div.offsetLeft);\n// setInterval(() => {\n//     div.style.width=div.offsetWidth+1+\"px\";//多次回流\n// }, 100);\n//改:\n// var wid=div.offsetWidth;\n// setInterval(() => {\n//     wid+=1;\n//     div.style.width=wid+\"px\";\n// }, 100);\n\n//4、文档碎片（内存中的一个变量）\n\n\n"],"sourceRoot":""}