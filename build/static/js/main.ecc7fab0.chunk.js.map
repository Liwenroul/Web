{"version":3,"sources":["showTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","toduinput","handleChang","e","setState","target","name","parseInt","value","handleInput","keyCode","props","add","state","a","b","c","this","focus","ref","inp","onChange","onKeyDown","text","type","onClick","console","log","Todoing","todo","map","item","index","key","del","length","Todolist","addItem","data","delItem","idx","splice","fin","ReactDOM","render","document","getElementById"],"mappings":"yLAMuBA,Y,eCJFC,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAY,SAACC,GACT,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAMC,SAA0B,KAAjBJ,EAAEE,OAAOG,MAAW,EAAEL,EAAEE,OAAOG,SAXnD,EAcbC,YAAY,SAACN,GAEM,KAAZA,EAAEO,SACD,EAAKC,MAAMC,IAAIT,EAAEE,OAAOG,QAd5B,EAAKK,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAqBTC,KAAKH,EAAEI,U,+BAGD,IAAD,OACL,OACI,6BAEI,2BAAOC,IAAK,SAACC,GAAO,EAAKN,EAAEM,GAAMd,KAAK,IAAIe,SAAUJ,KAAKf,YAAaM,MAAOS,KAAKJ,MAAMC,EAAGQ,UAAWL,KAAKR,YAAac,KAAK,SAFjI,IAII,2BAAOJ,IAAI,IAAIb,KAAK,IAAIe,SAAUJ,KAAKf,YAAaM,MAAOS,KAAKJ,MAAME,EAAGO,UAAWL,KAAKR,YAAac,KAAK,SAJ/G,IAMI,2BAAOjB,KAAK,IAAIe,SAAUJ,KAAKf,YAAaM,MAAOS,KAAKJ,MAAMG,EAAGM,UAAWL,KAAKR,YAAac,KAAK,SANvG,IAQI,2BAAIN,KAAKJ,MAAMC,EAAEG,KAAKJ,MAAME,EAAEE,KAAKJ,MAAMG,GAEzC,2BAAOG,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMI,KAAK,SAIxC,4BAAQC,QAAS,WAAKC,QAAQC,IAAI,EAAKP,OAAvC,qB,GAzCuBpB,aCClB4B,E,iLAOP,IAAD,OACAC,EAAMZ,KAAKN,MAAXkB,KACL,OACI,kCACA,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OAEL,wBAAIC,IAAKD,GAAQD,EAAjB,MACI,4BAAQN,QAAS,SAACtB,GAAK,EAAKQ,MAAMuB,IAAIF,KAAtC,wBAMhB,8BAAOH,EAAKM,a,GAtBanC,aCIhBoC,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,QAAQ,SAACC,GACL,EAAKlC,SAAS,CACVyB,KAAK,GAAD,mBAAK,EAAKhB,MAAMgB,MAAhB,CAAqBS,OATpB,EAYbC,QAAQ,SAACC,GAKL,IAAIX,EAAK,YAAI,EAAKhB,MAAMgB,MACxBA,EAAKY,OAAOD,EAAI,GAChB,EAAKpC,SAAS,CACVyB,KAAKA,KAlBT,EAAKhB,MAAM,CACPgB,KAAK,CAAC,EAAE,EAAE,IAHL,E,sEAsCT,OACI,6BACI,kBAAC,EAAD,CAAWjB,IAAKK,KAAKoB,UACrB,kBAAC,EAAD,CAASH,IAAKjB,KAAKsB,QAASV,KAAMZ,KAAKJ,MAAMgB,KAAMa,IAAKzB,KAAKyB,W,GA1CvC1C,a,MCOtC2C,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,U","file":"static/js/main.ecc7fab0.chunk.js","sourcesContent":["//子组件\r\nimport React,{Fragment,Component} from 'react';//将fragment解构，则下面使用时不用React.Fragment\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n//方式二：类定义组件，props是类的属性\r\nclass ShowTime extends Component{\r\n    constructor(props){//声明状态,自动执行的函数\r\n        super(props);//必须最先调用,获得构造器中的属性，必须传参数props\r\n        this.state={//通过setState改变里面的值\r\n            time:new Date().toLocaleString(),//声明变量\r\n            a:100\r\n        }\r\n        console.log('constructor');\r\n        setInterval(() => {\r\n            this.setState({//数据一变，react会响应变化，重新渲染\r\n                time:new Date().toLocaleString()\r\n            })\r\n        }, 1000);\r\n    }\r\n    shouldComponentUpdate(){//是否要更新；flase;setState改变，render只执行一遍\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){//三个参数（preProps,preState,data）\r\n        console.log(\"cdupdate\");\r\n        console.log(preProps,preState);//preState更新之前的state\r\n        console.log(data);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"getshost\");\r\n        return {name:this.state.a};//返回值给componentDidUpdate\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){//自动执行（生命周期函数）setState改变，render执行一遍\r\n        console.log('render');\r\n        var {name,age}=this.props;//解构\r\n        return (\r\n            <Fragment>\r\n                {/**条件渲染 ：三目运算符(if-else)、&&(if)*/}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {/* {name.length>5 && <div>姓名：{name}</div>} */}\r\n\r\n                <div>{this.state.time}</div>\r\n                \r\n                {/**数组循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{//返回数组\r\n                            if(index%2===0){\r\n                                return <p key={index}>{item}</p>//变量加{},key唯一标识，内容、标签没变，位置变了，也不重新渲染\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n//默认导出：只能导出一次，被引入时可以重命名\r\n// export default ShowTime;//导出，有default，可以修改导入的组件名字   import ShowTime from \"./showTime\"   \r\n\r\n//命名导出:可以导出多个，被引入时与导出的名一样（类似解构）\r\nexport {ShowTime};//import {ShowTime} from \"./showTime\"\r\nexport const num=100;","import React, { Component } from 'react'\r\n\r\nexport default class toduinput extends Component {\r\n    constructor(){\r\n        super();\r\n        // this.handleInput=this.handleInput.bind(this);//this绑定到handleInput\r\n        this.state={\r\n            a:\"\",\r\n            b:\"\",\r\n            c:\"\"\r\n        }\r\n    }\r\n    handleChang=(e)=>{\r\n        this.setState={\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)//选择a\\b\\c,一个事件控制三个表单元素\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode===13){//按下回车\r\n            this.props.add(e.target.value);//e.target发生事件的最根本元素，此处表示input;将数据传给父组件\r\n        }\r\n    }\r\n    componentDidMount(){//render之后执行\r\n        this.a.focus();\r\n        // this.refs.b也可获得input节点\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <input ref={(inp)=>{this.a=inp}} name='a' onChange={this.handleChang} value={this.state.a} onKeyDown={this.handleInput} text=\"text\"></input>{/**子组件---->父组件： onKeyDown不会自动执行*/}\r\n                +\r\n                <input ref='b' name='b' onChange={this.handleChang} value={this.state.b} onKeyDown={this.handleInput} text=\"text\"></input>{/**子组件---->父组件： onKeyDown不会自动执行*/}\r\n                +\r\n                <input name='c' onChange={this.handleChang} value={this.state.c} onKeyDown={this.handleInput} text=\"text\"></input>{/**子组件---->父组件： onKeyDown不会自动执行*/}\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件：一次性获取或处理表单元素的值  ref获取DOM节点，获取值也要从状态中获取*/}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"></input>\r\n\r\n\r\n                {/* 获取上一节点的值，可将上一节点的值保存到状态 ；可以实时获取表单的值；写法相对麻烦*/}\r\n                <button onClick={()=>{console.log(this.inp)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 受控组件：\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，给input标签加上name属性，事件处理函数中写：\r\n// setState={\r\n//             [e.target.name]:e.target.value\r\n//         }\r\n","import React, { Fragment,Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    // delItem=(idx,e)=>{\r\n    //     this.props.del(idx);\r\n    // }\r\n    // fin=(e)=>{\r\n    //     this.props.fin(e.target.value);\r\n    // }\r\n    render() {\r\n        var {todo}=this.props;\r\n        return (\r\n            <fragment>\r\n            <ul>\r\n                {//不是语句，是值，不用;结束\r\n                    todo.map((item,index)=>\r\n                        // <li key={index}>{item}---<button onClick={this.delItem.bind(this,index)}>删除</button></li>\r\n                        <li key={index}>{item}---\r\n                            <button onClick={(e)=>{this.props.del(index)}}>删除---</button>\r\n                            {/* <button onClick={this.fin}>完成</button> */}\r\n                        </li>//不用写函数delItem\r\n                    )\r\n                }\r\n            </ul>\r\n            <span>{todo.length}</span>\r\n            </fragment>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.propTypes={//定义属性类型,进行类型检查\r\n    todo:PropTypes.array,//string会报错\r\n    del:PropTypes.func\r\n}\r\n\r\n// Todoing.defaultProps={//设置默认值，不用传proptypes\r\n//     todo:[1,2,4,5,6]\r\n// }","//Todolist父组件\r\n//引入Todoinput、Todoing；被引入到index.js\r\nimport React, { Component } from 'react'\r\nimport Todoinput from \"./Todoinput\";\r\nimport Todoing from \"./Todoing\";\r\n\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3],//通过状态声明变量\r\n            // flist:[]\r\n        }\r\n    }\r\n    addItem=(data)=>{//是属性，是一个方法，data是输入的数据\r\n        this.setState({//改变数组,页面会自动变\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem=(idx)=>{//传参和对象（此处没有用到e 例子  并且对象要作为最后一个参数） \r\n        /**\r\n         * 1、状态不能直接改变或处理state，通过setState改变\r\n         * 2、setState是异步执行\r\n         */\r\n        let todo=[...this.state.todo];//拷贝一份操作\r\n        todo.splice(idx,1);\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n        // console.log(this.state.todo);//先执行\r\n        // this.setState((state,props)=>{//可接收两个参数  state是前一个传来的数\r\n        //     console.log(state.todo);\r\n        //     return{\r\n        //         todo:todo;\r\n        //     }\r\n        // })\r\n//在setState里获取state可能会出错，不是你想要的值，可以像上面一样，把第一个参数写成函数\r\n    // fin=(data1)=>{\r\n    //     this.delItem(data1);\r\n    //     this.setState({\r\n    //         flist:this.\r\n    //     })\r\n    // }   \r\n    }\r\n    render() {//属性、状态一变，就执行\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo} fin={this.fin}/>{/**父组件---->子组件：todo */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//深拷贝、浅拷贝\r\n        // var obj={a:100,b:[1,2,3]};\r\n        // var obj1={c:300};\r\n        // var o=obj;\r\n        // var o1={...obj};//新对象\r\n        // var o2=Object.assign(obj,obj1);//浅拷贝，o===obj\r\n        // o.a=200;\r\n        // o.b[0]=200;//浅拷贝（部分相同）\r\n        // o1.a=200;\r\n        // //深拷贝：每一层都不一样\r\n        // var str=JSON.parse(JSON.stringify(obj));//JSON.stringify(obj)一个新的字符串，JSON.parse(JSON.stringify(obj))一个新的对象\r\n\r\n        //遍历对象\r\n        // Object.keys(obj).forEach((item)=>{//Object.keys(obj)表示的属性名组成的数组\r\n        //     console.log(item);\r\n        //     console.log(obj[item]);\r\n        // });","\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport React,{Fragment,Component} from 'react';//将fragment解构，则下面使用时不用React.Fragment\nimport ReactDOM from 'react-dom';\nimport {ShowTime} from './showTime';//引入组件，js可以省略\nimport Todolist from './Todolist/Todolist';//也可显示出它里面引入的\nimport './index.css';\nimport { tsPropertySignature } from '@babel/types';\n\n\n//组件交互：\n//父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件---->父组件：\nReactDOM.render(<Todolist/>,document.getElementById('root'));\n\n\n\n\n\n\n\n//组件\n//方式一：函数定义组件，函数名大写，返回react\n// function ShowTime(props){//props只读，不可修改\n//     console.log(props);\n//     return (//多个标签返回加括号，并且将所有的标签放入到一个闭合的标签里，文档碎片fragment，一个容器\n//         <Fragment>\n//             <div>{props.age}</div>\n//             <div>\n//                 {props.name}\n//                 {new Date().toLocaleDateString()}\n//             </div>\n//         </Fragment>\n//     )\n// }\n\n//方式二：类定义组件，props是类的属性\n// class ShowTime extends Component{\n//     constructor(props){//声明状态,自动执行的函数\n//         super(props);//必须最先调用,获得构造器中的属性，必须传参数props\n//         this.state={//通过setState改变里面的值、声明变量\n//             time:new Date().toLocaleString(),//声明变量\n//             a:100\n//         }\n//         console.log('constructor');\n//         setInterval(() => {\n//             this.setState({//数据一变，react会响应变化，重新渲染\n//                 time:new Date().toLocaleString()\n//             })\n//         }, 1000);\n//     }\n//     shouldComponentUpdate(){//是否要更新；flase;setState改变，render只执行一遍\n//         if(this.state.a>10){\n//             return true;\n//         }\n//         return false;\n//     }\n//     componentDidUpdate(preProps,preState,data){//三个参数（preProps,preState,data）\n//         console.log(\"cdupdate\");\n//         console.log(preProps,preState);//preState更新之前的state\n//         console.log(data);\n//     }\n//     getSnapshotBeforeUpdate(){\n//         console.log(\"getshost\");\n//         return {name:this.state.a};//返回值给componentDidUpdate\n//     }\n//     componentDidMount(){\n//         console.log('didmount');\n//     }\n//     render(){//自动执行（生命周期函数）setState改变，render执行一遍\n//         console.log('render');\n//         var {name,age}=this.props;//解构\n//         return (\n//             <Fragment>\n//                 {/**条件渲染 ：三目运算符(if-else)、&&(if)*/}\n//                 {name.length>5?<div>姓名：{name}</div>:''}\n//                 {/* {name.length>5 && <div>姓名：{name}</div>} */}\n\n//                 <div>{this.state.time}</div>\n                \n//                 {/**数组循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item,index)=>{//返回数组\n//                             if(index%2===0){\n//                                 return <p key={index}>{item}</p>//变量加{},key唯一标识，内容、标签没变，位置变了，也不重新渲染\n//                             }\n//                         })\n//                     }\n//                 </div>\n//             </Fragment>\n//         )\n//     }\n// }\n\n\n\n//组件ShowTime\n// var num=[1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"lisi\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n//显示当前系统时间\n//只有改变的节点才会动，性能好\n// function showTime(){\n//     var ele=<div>{new Date().toLocaleString()}</div>//react对象\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// }\n// showTime();\n// setInterval(showTime, 1000);\n\n\n\n\n\n\n\n\n// var str='react';\n//遇到<,ele转换为对象\n// ①var ele=<h1 class=\"tit\">你好 <p>react</p></h1>\n// var obj={\n//     type:'div',\n//     props:{\n//         id:'box',\n//         class:'box',\n//         children:[\n//             'hello',\n//             'react',\n//             {\n//                 type:'h1',\n//                 props:{\n//                     id:'tit',\n//                     class:'tit',\n//                     children:[\n//                         'title',\n//                         'react',\n                        \n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n\n//react解析栈\n//jsx语法\n//返回对象\n// var ele=React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'tit',class:'title'},\n//         'hello',\n//     )\n// );//②\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));//获取根节点,ele不用加 \" \",不是一个标签，而是对象\n\n//③渲染，将obj加入root中\n// function render(obj,container){\n//     var {type,props}=obj;//解构赋值\n//     var fragment=document.createDocumentFragment();//文档碎片 ：类似节点，相当于一个变量\n//     var ele=document.createElement(obj.type);//创键div\n//     for(var item in props){//将obj的属性加入到创建的div\n//         if(item==='class'){\n//             ele.className=props[item];\n//             // ele.className=obj.props[item];\n//         }\n//         else if(item==='children'){\n//             for(var i=0;i<props.children.length;i++){\n                \n//                 if(typeof props.children[i]==='object'){\n//                     render(props.children[i],ele);\n//                 }\n//                 else{\n//                     // ele.innerHtml+=props.children[i];\n//                     var txt=document.createTextNode(props.children);\n//                     ele.appendChild(txt);\n//                 }\n                \n//             }\n//         }\n//         else{\n//             ele[item]=obj.props[item];//class未加进去\n//             //ele[item]=obj.props[item];\n//         }\n        \n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n\n// render(obj,document.getElementById('root'));\n\n/**\n * 页面渲染过程：\n * 请求HTML页面，浏览器HTML解析器会解析HTML文件，生成DOM树\n * link引入CSS文件，CSS解析器解析CSS文件，生成CSS对象模型（CSSOM和DOM树结合，生成一个（render）渲染树），最后浏览器绘制页面\n * \n */\n\n\n//页面回流（重排reflow）:DOM结构变化、内容变化、大小、位置、显示（display）的变化，都会引起页面回流（变化次数多，性能就差）\n//页面重绘（repaint)：颜色的变化（背景色、字体颜色、边框颜色）\n//回流一定引起重绘\n\n//1、先用变量进行DOM处理，最后一次性渲染\n// console.time('time');\n// var div= document.getElementById('root');//文档碎片\n// var str='';\n// for(var i=0;i<1000;i++){\n//     // document.getElementById('root').innerHTML+='<p>'+i+'</p>'//每次调root，不好\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;//先用变量处理，再一次性渲染\n// console.timeEnd('time');\n\n//2、对于样式的处理\n// var div=document.getElementById('root');\n// div.style.width='100px';//引起回流\n// div.style.height='100px';//引起回流\n// div.style.background='red';\n\n//改:\n// .active{\n//     width:100px;\n//     height:100px;\n// }\n// div.className='active';\n\n//3、offsetLeft:距离浏览器左边的距离、offsetwidth等都会引起回流\n// console.log(div.offsetLeft);\n// setInterval(() => {\n//     div.style.width=div.offsetWidth+1+\"px\";//多次回流\n// }, 100);\n//改:\n// var wid=div.offsetWidth;\n// setInterval(() => {\n//     wid+=1;\n//     div.style.width=wid+\"px\";\n// }, 100);\n\n//4、文档碎片（内存中的一个变量）\n\n\n"],"sourceRoot":""}